<?php
namespace poli;

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Turno {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'idTurno',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    2 => array(
      'var' => 'fechaHora',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'vigente',
      'isRequired' => false,
      'type' => TType::BOOL,
      ),
    4 => array(
      'var' => 'localidad',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'deporte',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    6 => array(
      'var' => 'tipoCancha',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    7 => array(
      'var' => 'apellido',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var int
   */
  public $idTurno = null;
  /**
   * @var string
   */
  public $fechaHora = null;
  /**
   * @var bool
   */
  public $vigente = null;
  /**
   * @var string
   */
  public $localidad = null;
  /**
   * @var string
   */
  public $deporte = null;
  /**
   * @var string
   */
  public $tipoCancha = null;
  /**
   * @var string
   */
  public $apellido = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['idTurno'])) {
        $this->idTurno = $vals['idTurno'];
      }
      if (isset($vals['fechaHora'])) {
        $this->fechaHora = $vals['fechaHora'];
      }
      if (isset($vals['vigente'])) {
        $this->vigente = $vals['vigente'];
      }
      if (isset($vals['localidad'])) {
        $this->localidad = $vals['localidad'];
      }
      if (isset($vals['deporte'])) {
        $this->deporte = $vals['deporte'];
      }
      if (isset($vals['tipoCancha'])) {
        $this->tipoCancha = $vals['tipoCancha'];
      }
      if (isset($vals['apellido'])) {
        $this->apellido = $vals['apellido'];
      }
    }
  }

  public function getName() {
    return 'Turno';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->idTurno);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fechaHora);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->vigente);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->localidad);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deporte);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipoCancha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apellido);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Turno');
    if ($this->idTurno !== null) {
      $xfer += $output->writeFieldBegin('idTurno', TType::I32, 1);
      $xfer += $output->writeI32($this->idTurno);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fechaHora !== null) {
      $xfer += $output->writeFieldBegin('fechaHora', TType::STRING, 2);
      $xfer += $output->writeString($this->fechaHora);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vigente !== null) {
      $xfer += $output->writeFieldBegin('vigente', TType::BOOL, 3);
      $xfer += $output->writeBool($this->vigente);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->localidad !== null) {
      $xfer += $output->writeFieldBegin('localidad', TType::STRING, 4);
      $xfer += $output->writeString($this->localidad);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deporte !== null) {
      $xfer += $output->writeFieldBegin('deporte', TType::STRING, 5);
      $xfer += $output->writeString($this->deporte);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipoCancha !== null) {
      $xfer += $output->writeFieldBegin('tipoCancha', TType::STRING, 6);
      $xfer += $output->writeString($this->tipoCancha);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apellido !== null) {
      $xfer += $output->writeFieldBegin('apellido', TType::STRING, 7);
      $xfer += $output->writeString($this->apellido);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Cancha {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'localidad',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    2 => array(
      'var' => 'idFilial',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    3 => array(
      'var' => 'tipoCancha',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'idCancha',
      'isRequired' => false,
      'type' => TType::I32,
      ),
    5 => array(
      'var' => 'deporte',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $localidad = null;
  /**
   * @var int
   */
  public $idFilial = null;
  /**
   * @var string
   */
  public $tipoCancha = null;
  /**
   * @var int
   */
  public $idCancha = null;
  /**
   * @var string
   */
  public $deporte = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['localidad'])) {
        $this->localidad = $vals['localidad'];
      }
      if (isset($vals['idFilial'])) {
        $this->idFilial = $vals['idFilial'];
      }
      if (isset($vals['tipoCancha'])) {
        $this->tipoCancha = $vals['tipoCancha'];
      }
      if (isset($vals['idCancha'])) {
        $this->idCancha = $vals['idCancha'];
      }
      if (isset($vals['deporte'])) {
        $this->deporte = $vals['deporte'];
      }
    }
  }

  public function getName() {
    return 'Cancha';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->localidad);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->idFilial);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tipoCancha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->idCancha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->deporte);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Cancha');
    if ($this->localidad !== null) {
      $xfer += $output->writeFieldBegin('localidad', TType::STRING, 1);
      $xfer += $output->writeString($this->localidad);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idFilial !== null) {
      $xfer += $output->writeFieldBegin('idFilial', TType::I32, 2);
      $xfer += $output->writeI32($this->idFilial);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tipoCancha !== null) {
      $xfer += $output->writeFieldBegin('tipoCancha', TType::STRING, 3);
      $xfer += $output->writeString($this->tipoCancha);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->idCancha !== null) {
      $xfer += $output->writeFieldBegin('idCancha', TType::I32, 4);
      $xfer += $output->writeI32($this->idCancha);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deporte !== null) {
      $xfer += $output->writeFieldBegin('deporte', TType::STRING, 5);
      $xfer += $output->writeString($this->deporte);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CampoVacio extends TException {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'dato',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $dato = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['dato'])) {
        $this->dato = $vals['dato'];
      }
    }
  }

  public function getName() {
    return 'CampoVacio';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dato);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CampoVacio');
    if ($this->dato !== null) {
      $xfer += $output->writeFieldBegin('dato', TType::STRING, 1);
      $xfer += $output->writeString($this->dato);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NoEncontrado extends TException {
  static $isValidate = false;

  static $_TSPEC = array(
    1 => array(
      'var' => 'dato',
      'isRequired' => false,
      'type' => TType::STRING,
      ),
    );

  /**
   * @var string
   */
  public $dato = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['dato'])) {
        $this->dato = $vals['dato'];
      }
    }
  }

  public function getName() {
    return 'NoEncontrado';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dato);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NoEncontrado');
    if ($this->dato !== null) {
      $xfer += $output->writeFieldBegin('dato', TType::STRING, 1);
      $xfer += $output->writeString($this->dato);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


